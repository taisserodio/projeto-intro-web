//*****************************************SEMANA1 ***********************************
/*1. Para o item qu e voc√™ decidiu, pense nas caracter√≠sticas que s√£o importantes para constru√≠-lo. Vamos usar estas caracter√≠sticas para definir exemplos destes objetos usando o c√≥digo.
Voc√™ precisar√° criar pelo menos:
  * uma caracter√≠stica String;
  * uma caracter√≠stica Number;
  * uma caracter√≠stica Boolean;
Exemplos abaixo
const nome; //string
const idade; //number 
const verificouEmail; //boolean */
//const nome1 = "Fulano";
//const idade1 = 33;
//const verificouEmail1 = false;

/*const nome = "Base"
const valor = 30.00 ;
const ehLiquida = true ;
const cor = [" bege claro ", "bege medio ", "escuro" ]


const nome1 = "P√≥"
const valor01 = 20.00 ;
const ehEmP√≥ = true ;
const cor1 = ["medio claro " , "medio" , "medio escuro"]

const nome2 = "Gloss"
const valor02 = 10.00 ;
const ehEmP√≥1 = false ;
const cor2 = ["vermelho" , "rosa" , "nude" , "incolor"]*/

/*Fa√ßa um c√°lculo de m√©dia, entre os valores num√©ricos respectivos de cada item. 
Imprima o valor da m√©dia utilizando um console.log. Guarde este valor em uma const;
üí°A m√©dia deve ser igual √† soma dos itens, dividida pelo total de itens.
const verificaEmails = verificouEmail1 && verificouEmail2 && verificouEmail3;
console.log(verificaEmails);
// nesse caso, vai imprimir false, pois verificouEmail1 === false*/

//const media = (( valor  +  valor01 +  valor02 )/3)

/*4. Com um console.log, imprima o resultado de uma opera√ß√£o l√≥gica que checa se todos os 
valores de vari√°veis booleanas criadas at√© aqui s√£o verdadeiras.*/

//const verificanome = (ehLiquida && ehEmP√≥ && ehEmP√≥1)
//console.log(verificanome)

/*Crie pelo menos mais uma caracter√≠stica para o item que voc√™ criou. 
Esta caracter√≠stica deve ser um array. Mantenha o tipo de dado do array criado sempre o mesmo,
 isto √©, se √© um array de strings, s√≥ deve receber strings.
const nome; //string
const idade; //number
const verificouEmail; //boolean
const projetos; //array de strings

. Exiba um relat√≥rio utilizando console.log(), mostrando todos os dados de cada um dos itens criados at√© aqui
  1. O log deve exibir o dado de nome, t√≠tulo ou afim sempre em LETRAS MAI√öSCULAS, como no exemplo abaixo.
FULANO
idade: 33
verificou email?: false
projetos: ["Projeto de HTML", "Projeto de CSS", "Projeto React"] */

//const maiuscula = nome.toUpperCase()

//const maiscula1 = nome1.toUpperCase()

//const maiscula2 = nome2.toUpperCase()

/*console.log(maiuscula , valor , ehLiquida , cor)
console.log(maiscula1 , valor01 , ehEmP√≥ , cor1)
console.log(maiscula2 , valor02 , ehEmP√≥1 , cor2)*/

//******************************************SEMANA2*********************************************
/*1. Transforme os itens que criamos nas √∫ltimas semanas em objetos.
Exemplo
//ANTES
  const nome1 = "Fulano";
  const idade1 = 33;
  const verificouEmail1 = false; 
//DEPOIS
objeto1 = { 
    nome: "Fulano", 
    idade: 33,
    verificouEmail: false
  } */

//   Objeto1 = {
//     nome :"Base",
//     valor:30.00,
//     ehLiquida:true,
//     cor:["Bege claro" , "Bege medio" , "escuro"] 
//   }


//   Objeto2 = {
//     nome  :"P√≥",
//     valor : 20.00,
//     ehEmP√≥ : true,
//     cor : ["medio claro" , "medio" , "medio escuro"]
//   }

//   Objeto3 = {
//     nome :"Gloss",
//     valor : 10.00,
//     ehEmP√≥ : false,
//     cor : ["vermelho" , "rosa" , "nude" , "incolor"]
//   }

// //2. Crie um array para guardar os objetos. Este array deve estar vazio, por enquanto;
// nome=[]

// //3. Adicione os objetos criados no item 1 ao array de objetos criado no item 2, 
// //utilizando o push()
// //Ao fim, voc√™ deve ter algo parecido com isso:

//     //nome.push(Objeto1,Objeto2,Objeto3)
//     //console.log(nome)

// //4. Altere o item ‚ÄúAdicione os novos objetos no array de objetos, 
// //utilizando o push()‚Äù (item 3), para criar uma verifica√ß√£o antes de dar o push. 
// //A carater√≠stica booleana do objeto deve ser validada. Isto √©, 
// //o objeto s√≥ deve ser adicionado ao array se a propriedade booleana for true;
// //5. Crie uma condi√ß√£o else, que, em caso de valor false na condi√ß√£o acima, 
// //exiba um **ALERT** avisando para o usu√°rio que o item n√£o foi adicionado, 
// //e n√£o fa√ßa o push

// if (Objeto1.ehLiquida === true){
//   nome.push(Objeto1)
// }else {
//   alert("Objeto1 n√£o adcionado ao array nome")
// }

// if(Objeto2.ehEmP√≥ === true){
//   nome.push(Objeto2)
// }else{
//   alert("Objeto2 n√£o adcionado ao array nome")
// }

// if(Objeto3.ehEmP√≥ === true){
//   nome.push(Objeto3)
// }else{
//   alert("Objeto n√£o adcionado ao array nome")
// }

// console.log(nome)






// *********************************************SEMANA3******************************************

// 1. Reescrevendo o relat√≥rio criado utilizando console.log() que come√ßamos na semana 2,
// altere a forma que a caracter√≠stica de array dos itens seja escrita como um la√ßo que 
// guarde todos os valores da propriedade array do objeto em uma mesma string.
// Utilize esta string no relat√≥rio.
// Chamamos este processo de reescrever um c√≥digo j√° escrito, de refatora√ß√£o.
/*nome = []

Objeto1 = {
  nome: "Base",
  valor: 30.00,
  ehLiquida: true,
  cor: ["  Bege claro  ", "  Bege medio  ", "  medio escuro"]
}


Objeto2 = {
  nome: "P√≥",
  valor: 20.00,
  ehEmP√≥: true,
  cor: ["  Medio claro  ", "Medio", "  Medio escuro"]
}

Objeto3 = {
  nome: "Gloss",
  valor: 10.00,
  ehEmP√≥: false,
  cor: ["  vermelho   ", "   rosa   ", "   nude   ", "   incolor   "]
}

nome.push(Objeto2, Objeto1, Objeto3)
console.log(nome)

let nomeString = " "
for (let i = 0; i < Objeto1.cor.length; i++) {
  nomeString = nomeString + Objeto1.cor[i]
}

console.log(nomeString)

//let nomeString2= " "
nomeString = " "
for (let i = 0; i < Objeto2.cor.length; i++) {
  nomeString = nomeString + Objeto2.cor[i]
}

console.log(nomeString)

//let nomeString3 = " "
nomeString = " "
for (let i = 0; i < Objeto3.cor.length; i++) {
  nomeString = nomeString + Objeto3.cor[i]
}

console.log(nomeString)

*/


// 2. Ainda no relat√≥rio, altere-o para que ele seja criado utilizando um la√ßo.
//  Ou seja, voc√™ n√£o deve mais imprimir individualmente cada item do relat√≥rio.
//  Cada item deve ser exibido a partir de uma itera√ß√£o do la√ßo. Para testar,
//  adicione mais um item ao array de objetos, e verifique se ele √© exibido corretamente.
//  //ANTES



// -------->AQUI EH UM ARRAY DE MAQUIAGENS<--------
/*let maquiagens = [
  {
    nome: "Base",
    valor: 30.00,
    ehEmPo: false,
    cores: ["Bege claro", "Bege medio", "escuro"],
    marca:"Boca Rosa"
  },
  {
    nome: "P√≥",
    valor: 20.00,
    ehEmPo: true,
    cores: ["  Medio claro  ", "Medio", "  Medio escuro"],
    marca:"Maybelline"
  },
  {
    nome: "Gloss",
    valor: 10.00,
    ehEmPo: false,
    cores: ["  vermelho   ", "   rosa   ", "   nude   ", "   incolor   "],
    marca:"Dior"
  }
]

for (nome01 of maquiagens) {
  console.log('nome: ' + nome01.nome)
  console.log('Valor: ' + nome01.valor)
  console.log('√â em p√≥: ? ' + nome01.ehEmPo)
  console.log('Qual a marca: ? ' + nome01.marca)
  for (cor of nome01.cores) {
    console.log(`A cor da nome √©: ${cor}`)
  }
  console.log("----------------------");
}
*/


// 3. Crie uma fun√ß√£o que receba como par√¢metro um objeto, e devolva a string do relat√≥rio
// com os dados do objeto
/*const nome1 = {
  nome: "Base",
  valor: 30.00,
  ehEmPo: false,
  cores: ["Bege claro", "Bege medio", "escuro"],
  marca:"Boca Rosa"
}

function relatorionome(nome1){
    console.log('nome: ' + nome1.nome)
    console.log('Valor: ' + nome1.valor)
    console.log('√â em p√≥: ? ' + nome1.ehEmPo)
    console.log('Qual a marca: ? ' + nome1.marca)
    for (cor of nome1.cores) {
      console.log(`A cor da nome √©: ${cor}`)
    }
}

relatorionome(nome1)*/

// 4. Crie uma fun√ß√£o que recebe um array de objetos e uma string.
// Esta fun√ß√£o deve retornar um objeto, e o objeto retornado deve possuir apenas os itens que tenham o nome/t√≠tulo igual √† string passada como par√¢metro. 
//Caso n√£o exista um item, exiba um ALERT indicando que nenhum item foi encontrado

// let maquiagens = [
//   {
//     nome: "Base",
//     valor: 30.00,
//     ehEmPo: false,
//     cores: ["Bege claro", "Bege medio", "escuro"],
//     marca:"Boca Rosa"
//   },
//   {
//     nome: "P√≥",
//     valor: 20.00,
//     ehEmPo: true,
//     cores: ["  Medio claro  ", "Medio", "  Medio escuro"],
//     marca:"Maybelline"
//   },
//   {
//     nome: "Gloss",
//     valor: 10.00,
//     ehEmPo: false,
//     cores: ["  vermelho   ", "   rosa   ", "   nude   ", "   incolor   "],
//     marca:"Dior"
//   }
// ]

// function verificanome(maquiagens, nomenome) {
//   let maq;
//   for (objetonome of maquiagens) {
//     if (objetonome.nome === nomenome) {
//       maq = objetonome;
//     }
//   }
//   if (maq) {
//       console.log(maq)
//   } else {
//     alert("Objeto n√£o encontrado")
//   }
// }

// verificanome(maquiagens, "P√≥")







//***************************************************SEMANA   4 e 5******************************************************/

/*
*1. Crie uma p√°gina HTML, e nesta p√°gina, d√™ um t√≠tulo para sua lista de itens;
*2. Crie um cabe√ßalho, uma se√ß√£o principal, e um footer para a p√°gina;
*3. Na se√ß√£o principal. Crie duas divis√µes. Uma deve possuir um input e um bot√£o. A outra, deve possuir sections para criar os itens da lista;
*4. Crie uma section para cada item da lista;
*5. Para cada um dos tr√™s itens criados deve possuir todas as informa√ß√µes do array de objetos. As informa√ß√µes devem estar elencadas como lista n√£o ordenada. Esta tela n√£o precisa interagir com o JavaScript, tendo seus dados escritos diretamente nos elementos.
*6. Transforme o nome/t√≠tulo do item em um link para um artigo sobre este item (pode ser do google, de algum blog ou da Wikip√©dia)
üí° Recomendamos adicionar imagens a seus itens agora. Ao fazer isso, lembre-se de criar mais uma propriedade String nos seus objetos, para guardar o caminho do link at√© a imagem.
A partir do nosso exemplo de estiliza√ß√£o, crie a identidade da sua p√°gina seguindo os passos abaixo:
*1. Estilize o cabe√ßalho da sua p√°gina com o mesmo t√≠tulo que est√° no <title>;
*2. Estilize o rodap√© para sua p√°gina, e nele, coloque suas informa√ß√µes de contato (nome e github);
*3. Estilize a lista criada na semana passada, seguindo o padr√£o enviado;*/
//***************************************************SEMANA   6******************************************************/

//*1. Altere seu c√≥digo para que a tela de lista de itens crie os elementos da lista atrav√©s de manipula√ß√£o do DOM.// Atualmente, seus elementos est√£o criados no HTML e no CSS de forma est√°tica, sem que exista intera√ß√£o entre HTML 
// e CSS e o Script que criamos. A ideia √© que agora, os dados que comp√µem os elementos HTML devem ser criados a partir do
//  nosso c√≥digo JS. Para isso, devemos manipular os objetos do HTML e do CSS utilizando o DOM.
// 2. Utilize a fun√ß√£o de busca criada no item 2 da semana 6 para fazer com que ao digitar um campo no input e apertar o bot√£o,
// apenas os itens com nome igual ao da busca sejam renderizados na tela.

let listaDeMaquiagens = [
  {
    nome: "Base",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "base-boca-rosa-2.jpg",
    preco: "R$ 30,00",
    ehEmPo: false,
    cores: ["Bege claro", "Bege medio", "escuro"],
    marca: "Boca Rosa"
  },
  {
    nome: "P√≥",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "po-2.jpg",
    preco: "R$ 20,00",
    ehEmPo: true,
    cores: ["  Medio claro  ", "Medio", "  Medio escuro"],
    marca: "Maybelline"
  },
  {
    nome: "Gloss",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "glossDi.jpg",
    preco: "R$ 10,00",
    ehEmPo: false,
    cores: ["  vermelho   ", "   rosa   ", "   nude   ", "   incolor   "],
    marca: "Dior"
  },
  {
    nome: "Base",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "base-boca-rosa-2.jpg",
    preco: "R$ 30,00",
    ehEmPo: false,
    cores: ["Bege claro", "Bege medio", "escuro"],
    marca: "Boca Rosa"
  },
  {
    nome: "P√≥",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "po-2.jpg",
    preco: "R$ 20,00",
    ehEmPo: true,
    cores: ["  Medio claro  ", "Medio", "  Medio escuro"],
    marca: "Maybelline"
  },
  {
    nome: "Gloss",
    link: "https://pt.wikipedia.org/wiki/Wikip%C3%A9dia",
    imagem: "glossDi.jpg",
    preco: "R$ 10,00",
    ehEmPo: false,
    cores: ["  vermelho   ", "   rosa   ", "   nude   ", "   incolor   "],
    marca: "Dior"
  }
]

// Ex: 1
function listarMaquiagens(maquiagens) {
  const container = document.getElementById("container");

  for (let i = 0; i < maquiagens.length; i++) {

    const section = document.createElement("section")

    criarConteudoSection(section, maquiagens[i])

    container.appendChild(section)

  }

}

function criarConteudoSection(section, maquiagem) {
  section.innerHTML += ` 
    <div class="card">
      <img src="${maquiagem.imagem}">     
      <div class="card-content">
        <div class="card-title">
          <a href="${maquiagem.link}">${maquiagem.nome}</a>
        </div>
        <ul class="card-subtitle">
            <li>Pre√ßo: <a>${maquiagem.preco}</a></li>
            <li>Textura em P√≥: <a>${maquiagem.ehEmPo ? "Sim" : "N√£o"}</a></li>
            <li>Cores: <a>${maquiagem.cores}</a></li>
            <li>Marca: <a>${maquiagem.marca}</a></li>
        </ul>  
      </div>   
    </div> 
  `;
}

// Ex: 2
function buscarMaquiagem() {
  const inputBusca = document.getElementById("inputBusca").value;

  const novaLista = listaDeMaquiagens.filter(l => l.nome === inputBusca);

  if (novaLista.length > 0) {
    limpaLista();
    listarMaquiagens(novaLista);
  } else {
    limpaLista();
    listarMaquiagens(listaDeMaquiagens);
  }
}

function limpaLista() {
  const container = document.getElementById("container");
  container.innerHTML = "";
}

listarMaquiagens(listaDeMaquiagens)
